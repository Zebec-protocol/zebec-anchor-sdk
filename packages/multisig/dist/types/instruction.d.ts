import { Program } from '@project-serum/anchor';
import { AccountMeta, Keypair, PublicKey, Transaction } from '@solana/web3.js';
export declare class ZebecTransactionBuilder {
    readonly _multisigProgram: Program;
    readonly _streamProgram: Program;
    constructor(multisigProgram: Program, streamProgram: Program);
    execApproveTransaction(multisigSafeAddress: PublicKey, zebecAccountAndDataStoringTxAccount: PublicKey, senderAddress: PublicKey): Promise<Transaction>;
    execTransaction(safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTxAccount: PublicKey, remainingAccounts: AccountMeta[]): Promise<any>;
    execCreateSafe(multisigDataAccount: Keypair, multisigSafeNonce: number, owners: PublicKey[], threshold: number): Promise<Transaction>;
    execFeeVault(feeReceiverAddress: PublicKey, feeVaultAddress: PublicKey, feeVaultDataAddress: PublicKey, feePercentage: number): Promise<Transaction>;
    execDepositSol(zebecVaultAddress: PublicKey, senderAddress: PublicKey, receiverAddress: PublicKey, withdrawEscrowDataAccountAddress: PublicKey, amount: number): Promise<Transaction>;
    execDepositToken(zebecVaultAddress: PublicKey, receiverAddress: PublicKey, senderAddress: PublicKey, withdrawEscrowDataAccountAddress: PublicKey, tokenMintAddress: PublicKey, zebecVaultAssociatedTokenAddress: PublicKey, receiverAssociatedTokenAddress: PublicKey, amount: number): Promise<Transaction>;
    execDepositToVault(owners: PublicKey[], zebecVaultAddress: PublicKey, safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, senderAddress: PublicKey, amount: number): Promise<Transaction>;
    execDepositTokenToVault(owners: PublicKey[], zebecVaultAddress: PublicKey, safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, senderAddress: PublicKey, tokenMintAddress: PublicKey, zebecVaultAssociatedTokenAddress: PublicKey, pdaTokenData: PublicKey, amount: number): Promise<Transaction>;
    execInitStream(owners: PublicKey[], safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, streamDataAccountAddress: Keypair, withdrawDataAccountAddress: PublicKey, feeReceiverAddress: PublicKey, feeVaultDataAddress: PublicKey, feeVaultAddress: PublicKey, senderAddress: PublicKey, receiverAddress: PublicKey, startTime: number, endTime: number, amount: number): Promise<Transaction>;
    execUpdateStream(owners: PublicKey[], safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, streamDataAccountAddress: PublicKey, withdrawDataAccountAddress: PublicKey, senderAddress: PublicKey, receiverAddress: PublicKey, startTime: number, endTime: number, amount: number): Promise<Transaction>;
    execPauseStream(owners: PublicKey[], safeAddress: PublicKey, receiverAddress: PublicKey, streamDataAccountAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey): Promise<Transaction>;
    execResumeStream(owners: PublicKey[], safeAddress: PublicKey, receiverAddress: PublicKey, streamDataAccountAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey): Promise<Transaction>;
    execCancelStream(zebecVaultAddress: PublicKey, safeAddress: PublicKey, receiverAddress: PublicKey, streamDataAccountAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey, withdrawDataAccountAddress: PublicKey, feeReceiverAddress: PublicKey, feeVaultDataAddress: PublicKey, feeVaultAddress: PublicKey): Promise<Transaction>;
    execStreamWithdrawSol(senderAddress: PublicKey, receiverAddress: PublicKey, zebecVaultAddress: PublicKey, escrowAccountAddress: PublicKey, withdrawEscrowDataAccountAddress: PublicKey, feeReceiverAddress: PublicKey, feeVaultAddress: PublicKey, feeVaultDataAddress: PublicKey): Promise<Transaction>;
    execInstantStream(owners: PublicKey[], zebecVaultAddress: PublicKey, safeAddress: PublicKey, receiverAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey, withdrawDataAccountAddress: PublicKey, amountInLamports: number): Promise<Transaction>;
    execTransfer(owners: PublicKey[], senderAddress: PublicKey, receiverAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, safeAddress: PublicKey, amount: number): Promise<Transaction>;
    execTransferToken(owners: PublicKey[], safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, senderAddress: PublicKey, receiverAddress: PublicKey, destTokenAddress: PublicKey, sourceTokenAddress: PublicKey, tokenMintAddress: PublicKey, amount: number): Promise<Transaction>;
    execUpdateStreamToken(owners: PublicKey[], safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, streamDataAccountAddress: PublicKey, withdrawDataAccount: PublicKey, senderAddress: PublicKey, receiverAddress: PublicKey, tokenMintAddress: PublicKey, startTime: number, endTime: number, amount: number): Promise<Transaction>;
    execStreamInitToken(owners: PublicKey[], safeAddress: PublicKey, safeDataAccount: PublicKey, zebecTransactionAccount: Keypair, streamDataAccountAddress: Keypair, withdrawDataAccount: PublicKey, feeReceiverAddress: PublicKey, feeVaultDataAddress: PublicKey, feeVaultAddress: PublicKey, senderAddress: PublicKey, receiverAddress: PublicKey, tokenMintAddress: PublicKey, startTime: number, endTime: number, amount: number): Promise<Transaction>;
    execStreamPauseToken(owners: PublicKey[], safeAddress: PublicKey, receiverAddress: PublicKey, streamDataAccountAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey): Promise<Transaction>;
    execStreamResumeToken(owners: PublicKey[], safeAddress: PublicKey, receiverAddress: PublicKey, streamDataAccountAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey): Promise<Transaction>;
    execStreamCancelToken(owners: PublicKey[], zebecVaultAddress: PublicKey, safeAddress: PublicKey, receiverAddress: PublicKey, streamDataAccountAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey, withdrawDataAccountAddress: PublicKey, feeReceiverAddress: PublicKey, feeVaultDataAddress: PublicKey, feeVaultAddress: PublicKey, tokenMintAddress: PublicKey, pdaTokenData: PublicKey, destTokenData: PublicKey, feeTokenData: PublicKey): Promise<Transaction>;
    execStreamWithdrawToken(receiverAddress: PublicKey, senderAddress: PublicKey, feeReceiverAddress: PublicKey, feeVaultDataAddress: PublicKey, feevaultAddress: PublicKey, zebecVaultAddress: PublicKey, escrowAccountAddress: PublicKey, withdrawEscrowDataAccountAddress: PublicKey, tokenMintAddress: PublicKey, zebecVaultAssociatedAccountAddress: PublicKey, receiverAssociatedTokenAddress: PublicKey, feeVaultAssociatedTokenAddress: PublicKey): Promise<Transaction>;
    execInstantStreamToken(owners: PublicKey[], zebecVaultAddress: PublicKey, safeAddress: PublicKey, receiverAddress: PublicKey, zebecTransactionAccount: Keypair, safeDataAccount: PublicKey, senderAddress: PublicKey, withdrawDataAccountAddress: PublicKey, tokenMintAddress: PublicKey, pdaTokenData: PublicKey, destTokenData: PublicKey, amount: number): Promise<Transaction>;
}
